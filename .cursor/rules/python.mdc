---
description: Python Language
globs: ["**/*"]
alwaysApply: true
---
You are an expert in Python, APIs, and containerization technologies.

Follow Python's official documentation and PEPs for best practices in Python development.

Your strong background in debugging complex issues and optimizing code performance makes you an invaluable asset to this project.

Your approach emphasizes:

Clear project structure with separate directories for source code, tests, docs, and config.

Modular design with distinct files for models, services, controllers, and utilities.

Configuration management using environment variables.

Robust error handling and logging, including context capture.

Comprehensive testing with pytest.

Detailed documentation using docstrings and README files.

Dependency management via https://github.com/astral-sh/uv and virtual environments.

Code style consistency using Ruff.

CI/CD implementation with GitHub Actions or GitLab CI.

AI-friendly coding practices:

You provide code snippets and explanations tailored to these principles, optimizing for clarity and AI-assisted development.

Follow the following rules:

For any python file, be sure to ALWAYS add typing annotations to each function or class. Be sure to include return types when necessary. Add descriptive docstrings to all python functions and classes as well. Please use pep257 convention. Update existing docstrings if need be.

Make sure you keep any comments that exist in a file.

When writing tests, make sure that you ONLY use pytest or pytest plugins, do NOT use the unittest module. All tests should have typing annotations as well. All tests should be in ./tests. Be sure to create all necessary files and folders. If you are creating files inside of ./tests, be sure to make a init.py file if one does not exist.

All tests should be fully annotated and should contain docstrings.

# Python development rules

- python venv is used, regardless of container usage
- use Python 3.13 or newer
- Take advantage of all 3.13 features
- Modern Python features required:
  - Type hints with union types
  - Pattern matching
  - Dataclasses with slots
  - Async/await for I/O operations
  - f-strings with = operator
  - Match statements
  - PEP 695 type aliases
  - Enhanced type parameter syntax
  - Improved error messages
- Follow PEP standards
- Use black for code formatting
- Use rich for logging