---
description: Apply YOLO (You Only Live Once) development approach by immediately removing legacy code and compatibility layers
globs: src/**/*
alwaysApply: true
---
# YOLO Development Approach

- **Immediately Remove Legacy Components**
  - Delete deprecated classes, adapters, and compatibility layers entirely
  - Remove migration guides and backward compatibility documentation
  - Eliminate all conditional logic handling legacy patterns
  - Example:
  ```typescript
  // ❌ DON'T: Keep compatibility layers
  function getData(options) {
    if (options.legacyFormat) {
      // Handle legacy format
      return legacyAdapter(options);
    }
    // Handle new format
    return newImplementation(options);
  }

  // ✅ DO: Clean implementation without legacy support
  function getData(options) {
    return newImplementation(options);
  }
  ```

- **Maintain Clean Architecture**
  - Create direct relationships between components
  - Ensure clear separation of concerns
  - Design components that can stand alone without adapters
  - Use comprehensive tests to validate the simplified architecture

- **Update Documentation Completely**
  - Remove all references to deprecated components
  - Update README and documentation to reflect immediate transitions
  - Document the new approach thoroughly in component architecture

- **Simplify Code Ruthlessly**
  - Remove all parameter handling for backward compatibility
  - Standardize return types without legacy conversions
  - Eliminate duplicate code that existed for compatibility
  - Example:
  ```typescript
  // ❌ DON'T: Complex parameter handling for backward compatibility
  function processUser(user, options = {}) {
    const legacyMode = options.legacy || false;
    const data = legacyMode ? convertUserFormat(user) : user;
    // Complex conditional logic...
  }

  // ✅ DO: Clean parameter handling without legacy support
  function processUser(user) {
    // Direct implementation with standardized input
  }
  ```

- **Risk Mitigation Requirements**
  - Ensure comprehensive test coverage before and after removal
  - Maintain a clean component design that can stand on its own
  - Make clean, focused changes with clear intent
  - Validate all tests pass after changes

- **Expected Benefits**
  - Reduced code complexity
  - Simplified maintenance (one approach to understand)
  - More focused testing on actual functionality
  - Clearer system design without transition patterns
