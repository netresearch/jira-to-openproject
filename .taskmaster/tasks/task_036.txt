# Task ID: 36
# Title: Task #36: Refactor Client Architecture for YOLO Approach
# Status: done
# Dependencies: None
# Priority: high
# Description: Refactor the client architecture to establish clear ownership relationships between JiraClient, OpenProjectClient, DockerClient, RailsConsoleClient, and SSHClient using the YOLO development approach, emphasizing exception-based error handling, proper dependency injection, and file-based imports to eliminate circular dependencies.
# Details:
1. Audit existing client modules to map current ownership and identify circular dependencies.
2. Define ownership boundaries: assign each client its primary responsibilities and dependencies (e.g., DockerClient for container operations, SSHClient for remote command execution).
3. Introduce dependency injection: refactor constructors of each client to accept their required dependencies rather than instantiating them internally. Consider using a simple DI container or manual injection at the application entry point.
4. Replace dynamic or inline requires with explicit file-based imports: restructure modules into a flat file hierarchy (e.g., src/clients/jira_client.rb, src/clients/ssh_client.rb) to prevent circular requires.
5. Implement exception-based error handling: remove return-code checks or silenced errors, raising domain-specific exceptions in each client and document error hierarchies.
6. Follow the YOLO approach: commit incremental changes, write minimal tests for each refactor step, and continuously integrate to detect and address issues quickly.
7. Update module documentation and code comments to reflect new ownership and injection patterns.
8. Coordinate with the team to merge dependent branches and resolve any conflicts early.

# Test Strategy:
1. Unit tests: create isolated tests for each client, injecting mock dependencies to verify correct initialization, method calls, and exception raising on error conditions.
2. Integration tests: set up end-to-end scenarios where multiple clients interact (e.g., JiraClient invoking DockerClient) and assert expected outcomes without circular require failures.
3. Static analysis: run a dependency graph tool or linter to confirm no circular dependencies in the src/clients directory.
4. Exception handling validation: simulate failure scenarios (network timeouts, invalid credentials) and assert that the appropriate custom exceptions are raised and propagated.
5. Continuous Integration: ensure the build pipeline passes after each incremental commit, with coverage reports verifying that new code paths for dependency injection and error handling are exercised.

# Subtasks:
## 1. Define exception hierarchy and error handling patterns [done]
### Dependencies: None
### Description: Create a cohesive exception hierarchy for client errors and define consistent error handling patterns across all client components.
### Details:
1. Create a base ClientException class that all client-specific exceptions inherit from.\n2. Define specific exception types for different error categories (network, authentication, command execution, etc.).\n3. Document when each exception type should be raised.\n4. Establish patterns for exception propagation between client layers.\n5. Remove all return-code based error handling and replace with proper exception raising.


Updated the SSHClient to replace dictionary-based status returns with exceptions.
The following changes were made:

1. Refactored the `execute_command` method to return a tuple of (stdout, stderr, returncode)
   and raise exceptions for errors
2. Refactored the `copy_file_to_remote` method to return None on success and raise
   appropriate exceptions for errors
3. Refactored the `copy_file_from_remote` method to return the local file path on success
   and raise exceptions for errors
4. Refactored the `with_retry` utility method to work with the new exception-based approach
5. Added a specific `SSHConnectionError` exception for connection failures
6. Updated methods that used the result dictionaries to use the new return types

These changes implement a clean, exception-based error handling approach and remove all
the status dictionaries from the SSHClient class.


## 2. Refactor SSHClient for YOLO compliance [done]
### Dependencies: 36.1
### Description: Refactor SSHClient to be exception-based, remove status dictionaries, and implement direct file-based imports.
### Details:
1. Refactor SSHClient constructor to accept clear parameters and validate them strictly\n2. Replace all return-code and status dictionary patterns with appropriate exceptions\n3. Implement file-based imports to eliminate any circular dependencies\n4. Remove any OpenProject-specific code from this foundation layer\n5. Add proper documentation for exception throwing scenarios\n6. Ensure SSH operations handle authentication failures with specific exceptions\n7. Simplify file transfer functions to use clean, consistent error handling


Completed the YOLO refactoring of SSHClient. The following improvements were made:

1. Replaced all dictionary-based status returns with proper exceptions
2. Created a hierarchy of SSH-specific exceptions:
   - SSHConnectionError for connection issues
   - SSHCommandError for command execution failures
   - SSHFileTransferError for file transfer problems

3. Updated method documentation to clearly indicate exception handling patterns
4. Improved connection error handling with proper reconnection verification
5. Enhanced error propagation in file transfer operations
6. Simplified the API by returning direct values instead of dictionaries
7. Added detailed error messages with relevant context

The refactored SSHClient now follows modern Python exception handling best practices, providing
a more reliable foundation for the client architecture and making error detection more robust.


## 3. Refactor DockerClient with dependency injection [done]
### Dependencies: 36.2
### Description: Refactor DockerClient to accept an SSHClient instance through constructor injection and implement exception-based error handling.
### Details:
1. Modify DockerClient constructor to require an SSHClient instance\n2. Remove any code that creates SSHClient internally\n3. Refactor all operations to propagate exceptions from SSHClient upward with proper context\n4. Replace all status dictionary returns with exceptions\n5. Remove any OpenProject-specific logic that doesn't belong in DockerClient\n6. Simplify file transfer logic to rely on the injected SSHClient\n7. Ensure consistent and clean error handling patterns across all methods


Completed the DockerClient refactoring with dependency injection and exception-based error handling. Changes made:

1. Modified DockerClient constructor to require an SSHClient instance
2. Removed all code that created SSHClient internally
3. Updated all methods to work with SSHClient's new exception-based API
4. Replaced status dictionary returns with proper return values and exceptions
5. Improved error handling by properly propagating exceptions with appropriate context
6. Added proper error reporting by being explicit about which exceptions can be thrown
7. Simplified the file transfer code to work with the updated SSHClient interface

The refactored DockerClient now follows proper dependency injection patterns and propagates exceptions appropriately.


## 4. Refactor RailsConsoleClient for dependency injection [done]
### Dependencies: 36.3
### Description: Refactor RailsConsoleClient to properly accept a DockerClient through constructor injection, standardize command execution, and implement consistent error handling.
### Details:
1. Modify RailsConsoleClient constructor to accept a DockerClient instance\n2. Refactor command execution to use exception-based error handling\n3. Standardize output parsing with reliable marker-based approaches\n4. Remove any dependencies on OpenProjectClient\n5. Improve error detection and reporting with specific exception types\n6. Ensure robust handling of tmux session interaction\n7. Update documentation to reflect the new dependency pattern

## 5. Refactor OpenProjectClient as top-level coordinator [done]
### Dependencies: 36.4
### Description: Refactor OpenProjectClient to properly own and coordinate all other client components, following the hierarchical client architecture.
### Details:
1. Modify OpenProjectClient constructor to initialize components in the correct order\n2. Own all client initialization while respecting dependency injection\n3. Simplify client methods to use exception-based error handling consistently\n4. Implement a standardized approach to parse Rails console responses\n5. Add specific methods for large data operations\n6. Implement caching mechanisms with configurable TTL\n7. Update API methods to propagate appropriate exceptions\n8. Ensure clean coordination of file transfers through the component hierarchy

## 6. Refactor JiraClient for consistency [done]
### Dependencies: 36.1
### Description: Refactor JiraClient to use consistent error handling patterns and file-based imports to match the refactored architecture.
### Details:
1. Update JiraClient to use the new exception hierarchy\n2. Replace return-code and status dictionary patterns with exceptions\n3. Implement file-based imports to avoid circular dependencies\n4. Ensure consistent error propagation patterns\n5. Add appropriate logging with contextual information\n6. Maintain compatibility with the Jira API library while improving error handling\n7. Update documentation to reflect the new error handling approach

## 7. Update tests for the refactored architecture [done]
### Dependencies: 36.5, 36.6
### Description: Update existing tests and create new ones to verify the refactored client architecture with proper exception handling and dependency injection.
### Details:
1. Modify existing tests to account for exception-based error handling\n2. Create unit tests for each client component with mocked dependencies\n3. Implement integration tests that verify proper interaction between components\n4. Add tests for exception propagation across client layers\n5. Create tests for edge cases and error conditions\n6. Ensure tests verify proper file-based imports\n7. Update or create test fixtures as needed

## 8. Document the new client architecture [done]
### Dependencies: 36.7
### Description: Create comprehensive documentation for the refactored client architecture, including component relationships, dependency flow, and exception handling patterns.
### Details:
1. Create a detailed architecture document describing component relationships\n2. Update the main README with the new architecture diagram\n3. Document exception hierarchy and when each exception is raised\n4. Create code examples for proper component initialization\n5. Update docstrings in client classes to reflect new patterns\n6. Document file transfer workflows through the component hierarchy\n7. Create a migration guide for any code using the old architecture
