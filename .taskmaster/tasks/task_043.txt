# Task ID: 43
# Title: Implement flock-based wrapper for Taskmaster CLI operations
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create a wrapper script that uses flock to serialize task-master-ai invocations, preventing concurrent executions and optionally backing up JSON state, and update documentation to instruct developers to use it.
# Details:
1. Create a new executable script at scripts/run-taskmaster.sh with the following structure:
   • Shebang: #!/usr/bin/env bash
   • Open and acquire an exclusive nonblocking lock on /tmp/taskmaster.lock: 
     exec 200>/tmp/taskmaster.lock
     flock -n 200 || { echo "Another Taskmaster process is running." >&2; exit 1; }
   • (Optional) If the previous JSON state file (~/.taskmaster/state.json) exists, copy it to ~/.taskmaster/state.json.bak.timestamp for backup.
   • Execute the real CLI: task-master-ai "$@"
   • Capture the exit code, then release the lock implicitly when the script exits or explicitly via `exec 200>&-`.
   • Exit with the same code returned by task-master-ai.
2. Make sure scripts/run-taskmaster.sh is marked executable (chmod +x).
3. Update project documentation (e.g., README.md or docs/developer-guide.md):
   • Add a new section explaining that all task-master-ai commands should be run via scripts/run-taskmaster.sh.
   • Provide usage examples (e.g., scripts/run-taskmaster.sh plan --project X).
   • Describe the lock mechanism and backup behavior.
4. Ensure CI configuration does not invoke task-master-ai directly but uses the wrapper script instead.

# Test Strategy:
1. Concurrency test: In one shell, start `scripts/run-taskmaster.sh long-running-command` and while it holds the lock, attempt a second invocation; verify the second process exits immediately with an error message.
2. Lock release test: After the first process completes, immediately run the wrapper again and confirm it acquires the lock successfully.
3. Backup test: Create a dummy ~/.taskmaster/state.json with sample content, run the wrapper, and verify a timestamped backup file (~/.taskmaster/state.json.bak.*) was created and contains the original content.
4. Integration test: In CI or local environment, replace direct task-master-ai calls with the wrapper in a sample script; verify end-to-end workflow succeeds and JSON outputs are uncorrupted.
5. Documentation test: Review the updated docs section, render Markdown to confirm proper formatting and that examples reflect correct paths.
