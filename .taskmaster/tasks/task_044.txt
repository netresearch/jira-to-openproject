# Task ID: 44
# Title: Harden internal file I/O operations with atomic writes
# Status: pending
# Dependencies: 33
# Priority: medium
# Description: Improve the robustness of all critical JSON file operations by implementing atomic write patterns, file locking for concurrency protection, comprehensive error handling with rollback, and optional checksums for integrity validation.
# Details:
1. Analyze current file I/O patterns in src/utils/:
   - FileManager class (read_json_file, write_json_file)
   - DataHandler methods (save, load, save_to_path)
   - StateManager.save_current_state
   - All migration script file operations (as refactored in Task #33)
2. Implement an atomic‐write utility:
   a. Write to a temporary file in the same directory (e.g., filename.json.tmp)
   b. Flush and fsync the temp file
   c. Use os.replace (or atomic rename) to swap in the final file
   d. Ensure correct file permissions are preserved
3. Add POSIX file locking:
   - Use fcntl.flock in an exclusive (LOCK_EX) mode before writing
   - Release locks after rename
   - Wrap locks in context managers to guarantee cleanup
4. Review src/batch_processor.py’s usage of ThreadPoolExecutor:
   - Identify any shared file paths
   - Ensure each worker acquires the proper lock before write
   - Refactor concurrent write logic to use the atomic‐write utility
5. Error handling and rollback:
   - Catch all I/O exceptions during write or rename
   - On failure, delete any orphaned temp files and release locks
   - Surface clear, actionable error messages
6. Optional checksums:
   - Compute a SHA‐256 checksum after write
   - Store checksum alongside data or in a .checksum file
   - On load, verify checksum and raise on mismatch

# Test Strategy:
1. Unit tests for atomic write:
   - Simulate normal write: verify output file contains the correct JSON and no .tmp file remains
   - Simulate failure before rename (e.g., raise exception during fsync): ensure no partial file and proper cleanup of temp file
2. Concurrency tests:
   - Launch multiple threads/processes writing to the same file using the atomic‐write utility and verify all complete without corruption
   - Attempt simultaneous writes without acquiring lock: verify the lock prevents overlapping writes
3. ThreadPoolExecutor in batch_processor.py:
   - Mock worker tasks to write to shared resources and assert locks are honored
4. Checksum validation tests:
   - Write a file, corrupt it externally, then load and verify that checksum validation fails
5. Integration tests:
   - Run a simulated crash (kill process) during write and then restart to confirm the system recovers without partial/corrupted files
   - Verify migration scripts still run successfully with new I/O patterns
