# SECURITY CHECKLIST - Review before adding any Docker configuration:
# [ ] Is Docker socket mount really needed? (Usually NO - see security docs)
# [ ] Are services running as non-root users?
# [ ] Are secrets in .env file (not hardcoded in compose.yml)?
# [ ] Are unnecessary ports closed?
# [ ] Are resource limits defined?
# [ ] Are volumes properly scoped?
# [ ] Is .env file properly ignored by git?

secrets:
  postgres_password:
    external: true

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    env_file:
      - .env
    volumes:
      # Mount source code for live editing
      # IMPORTANT: Ensure DOCKER_UID/GID in your .env file match your
      # host user's UID/GID (`id -u`/`id -g`) to avoid permission issues
      - .:/app
      # SECURITY: Docker socket mount removed to prevent container escape
      # This migration tool uses SSH-based remote Docker client - no local Docker daemon access needed
      # See src/clients/docker_client.py for SSH-based Docker operations
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-jira_migration}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Mock Jira API server
  mock-jira:
    image: stoplight/prism:5.14.2
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    ports:
      - "4010:4010"
    command: mock -h 0.0.0.0 -p 4010 /app/api-specs/jira-api.yaml
    volumes:
      - ./api-specs:/app/api-specs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Mock OpenProject API server
  mock-openproject:
    image: stoplight/prism:5.14.2
    user: "${DOCKER_UID:-1000}:${DOCKER_GID:-1000}"
    ports:
      - "4011:4011"
    command: mock -h 0.0.0.0 -p 4011 /app/api-specs/openproject-api.yaml
    volumes:
      - ./api-specs:/app/api-specs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Redis for caching and task queues
  redis:
    image: redis:8.2-alpine
    # SECURITY: No port exposure needed - internal service only
    # NOTE: Redis Alpine runs as dedicated 'redis' user (not root) by default - no custom user needed
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL for data storage
  postgres:
    image: postgres:17-alpine
    # SECURITY: No port exposure needed - internal service only
    # NOTE: PostgreSQL Alpine runs as dedicated 'postgres' user (not root) by default - no custom user needed
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jira_migration}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      # POSTGRES_PASSWORD_FILE has lower precedence than POSTGRES_PASSWORD
      # This allows: env var (dev) -> Docker secret (production) fallback pattern
      # When POSTGRES_PASSWORD is set, it takes precedence over POSTGRES_PASSWORD_FILE
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER:-postgres}
    secrets:
      - postgres_password
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

volumes:
  redis_data:
  postgres_data:
