[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jira-to-openproject"
description = "Migration tool from Jira to OpenProject"
version = "0.1.0"
authors = [
    {name = "Jira to OpenProject team", email = "test@example.com"},
]
requires-python = ">=3.13"
readme = "README.md"
license = "MIT"
dependencies = [
    # Core HTTP library for API calls
    "requests>=2.32.4",

    # Jira API
    "jira>=3.10.5",

    # Data validation
    "pydantic>=2.11.7",

    # Configuration and environment
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.2",

    # Console display and progress
    "rich>=14.1.0",

    # Redis for caching and idempotency
    "redis>=6.4.0",

    # Error recovery and resilience
    "tenacity>=9.1.2",
    "pybreaker>=1.4.0",
    "structlog>=25.4.0",

    # Database for checkpointing
    "sqlalchemy>=2.0.42",

    # System monitoring and validation
    "psutil>=7.0.0",
    "jsonschema>=4.25.0",

    # Web dashboard
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "websockets>=15.0.1",
    "jinja2>=3.1.6",
    "aiofiles>=24.1.0",
    # Security/crypto utilities required by advanced_config_manager and security tests
    "cryptography>=42.0.0",
    "bcrypt>=4.1.2",
]

[project.optional-dependencies]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    "pytest-asyncio>=0.23.8",
]
dev = [
    "pre-commit>=4.2.0",
    "mypy>=1.17.1",
    "ruff>=0.12.7",
]

[project.scripts]
j2o = "src.main:main"

[tool.setuptools.packages.find]
include = ["src*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_classes = ["Test*"]
python_functions = ["test_*"]
python_files = ["test_*.py"]
markers = [
    "unit: mark a test as a unit test",
    "functional: mark a test as a functional test",
    "integration: mark a test as an integration test",
    "end_to_end: mark a test as an end-to-end test",
    "slow: mark a test as slow-running",
    "requires_docker: test requires Docker to be available",
    "requires_ssh: test requires SSH connection to be available",
    "requires_rails: test requires Rails console to be available",
]
addopts = "-v --strict-markers --cache-dir=var/.pytest_cache"

[tool.mypy]
python_version = "3.13"
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
strict = false
enable_error_code = "deprecated"

# Limit type-checking to exactly these directories
files   = ["src", "scripts", "tests"]
exclude = ['^build/', '^dist/', '^\\.venv/']

[tool.ruff]
target-version = "py313"
fix = true
line-length = 120

[tool.ruff.lint]
select = ["ALL"]

# Exclude specific rules in test files
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "ARG005", # Unused lambda argument
    "E501",   # Line too long
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic number in tests
    "SLF001", # Private member accessed
    "S108",   # Probable insecure temp file usage
    "S311",   # Non-crypto random
    "S603",   # subprocess untrusted input (tests)
    "S607",   # subprocess partial path (tests)
    "B018",   # Useless expression
    "BLE001", # Broad except in tests
    "B904",   # Raise from in except
    "TRY003", # Long messages outside exception class
    "TRY300", # Move return to else
    "ANN001", # Missing param annotation
    "ANN201", # Missing return annotation (public)
    "ANN202", # Missing return annotation (private)
    "ANN401", # Any in annotations
    "D401",   # Docstring imperative mood
    "D200",   # One-line docstring
    "D100",   # Missing docstring module
    "D101",   # Missing docstring class
    "D103",   # Missing docstring function
    "D417",   # Missing argument docs in docstring
    "T201",   # print in tests
    "T203",   # pprint in tests
    "PT011",  # pytest raises style
    "EXE001", # Shebang non-executable
    "SIM117", # Combine with statements
    "PLC0415", # Import not top-level
    "PLC",    # All PLC class in tests
    "EM102",  # f-string in exception
    "EM",     # All EM class in tests
    "PTH110", # os.path.exists -> Path.exists
    "PTH112", # os.path.isdir -> Path.is_dir
    "PTH113", # os.path.isfile -> Path.is_file
    "PTH202", # os.path.getsize -> Path.stat
    "DTZ005", # datetime.now without tz
    "DTZ001", # datetime() without tzinfo
    "N",      # Naming convention checks in tests
    "S",      # Security checks in tests
    "TRY",    # Try/except style in tests
    "PERF",   # Performance suggestions in tests
    "FBT",    # Boolean trap rules in tests
    "PTH",    # Pathlib migration in tests
    "RUF001", # Ambiguous characters
    "RUF003", # Ambiguous characters in comments
    "F841",   # Assigned but unused (test scaffolding)
    "B007",   # Unused loop variable
    "INP001", # Implicit namespace package for tests
    "ISC001", # Implicit string concatenation
    "PT013",  # import pytest style
    "PT018",  # assertion should be multiple parts
    "PGH003", # Use specific rule codes in ignores
    "ASYNC230", # async blocking open in tests
    "B017",   # assert blind exception in tests
    "B023",   # loop variable binding in lambda in tests
    "SIM102", # nested if in tests
    "RET504", # unnecessary assignment before return in tests
    "A004",   # Import shadowing builtin
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "TD001",  # Allow TODO without author in tests
    "TD002",  # Allow TODO without author tag in tests
    "TD003",  # Allow TODO without issue link in tests
    "FIX002", # Allow TODO present in tests
    "D205",   # Blank line after summary in docstring
    "D400",   # First line should end with period
    "D415",   # First line ends with proper punctuation
    "D102",   # Missing docstring in public method
    "ANN002", # *args type annotations
    "ANN003", # **kwargs type annotations
    "ANN204", # __init__ return type
    "PT012",  # pytest.raises single simple statement
    "SIM105", # contextlib.suppress vs try/except
    "ERA001", # Commented-out code (allowed in tests)
]
"scripts/**/*.py" = ["T201", "T203"]  # Allow (p)print in scripts
"examples/**/*.py" = ["T201", "T203"]  # Allow (p)print in examples

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-ansible>=25.6.3",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
]
