[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jira-to-openproject"
description = "Migration tool from Jira to OpenProject"
version = "0.1.0"
authors = [
    {name = "Jira to OpenProject team", email = "test@example.com"},
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    # Core HTTP library for API calls
    "requests==2.32.4",

    # Jira API
    "jira==3.8.0",

    # Data validation
    "pydantic==2.11.7",

    # Configuration and environment
    "python-dotenv==1.1.1",
    "pyyaml==6.0.2",

    # Console display and progress
    "rich==14.0.0",
    
    # Redis for caching and idempotency
    "redis==5.2.1",

    # Error recovery and resilience
    "tenacity==8.2.3",
    "pybreaker==0.7.0",
    "structlog==23.2.0",

    # Database for checkpointing
    "sqlalchemy==1.4.53",
    
    # System monitoring and validation
    "psutil==6.1.0",
    "jsonschema==4.25.0",
    
    # Web dashboard
    "fastapi==0.78.0",
    "uvicorn==0.17.0",
    "websockets==12.0",
    "jinja2==3.1.2",
    "aiofiles==23.2.1",
]

[project.optional-dependencies]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
]
dev = [
    "black>=25.1.0",
    "isort>=5.12.0",
    "flake8>=7.3.0",
    "pre-commit>=4.2.0",
    "mypy>=1.17.0",
    "ruff>=0.12.3",
]

[project.scripts]
j2o = "src.main:main"

[tool.setuptools]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_classes = ["Test*"]
python_functions = ["test_*"]
python_files = ["test_*.py"]
markers = [
    "unit: mark a test as a unit test",
    "functional: mark a test as a functional test",
    "integration: mark a test as an integration test",
    "end_to_end: mark a test as an end-to-end test",
    "slow: mark a test as slow-running",
    "requires_docker: test requires Docker to be available",
    "requires_ssh: test requires SSH connection to be available",
    "requires_rails: test requires Rails console to be available",
]
addopts = "-v --strict-markers"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.12"
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = false
strict = true
enable_error_code = "deprecated"

# Limit type-checking to exactly these directories
files   = ["src", "scripts", "tests"]
exclude = ['^build/', '^dist/', '^\\.venv/']

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.ruff]
target-version = "py312"
fix = true
line-length = 120

[tool.ruff.lint]
select = ["ALL"]

# Exclude specific rules in test files
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert detected
    "ARG002", # Unused method argument
    "E501",   # Line too long
    "PLR0913", # Too many arguments in function definition
    "SLF001", # Private member accessed
    "S108",   # Probable insecure usage of temporary file or directory
    "B018",   # Found useless expression
    "ANN401", # Dynamically typed expressions (Any)
    "D401",   # First line of docstring should be in imperative mood
    "D200",    # One-line docstring should fit on one line
    "T201",    # Allow print in tests
    "T203",    # Allow pprint in tests
    "PLR2004", # Use of magic number
    "D103",
    "D100",
    "PT011"
]
"scripts/**/*.py" = ["T201", "T203"]  # Allow (p)print in scripts
"examples/**/*.py" = ["T201", "T203"]  # Allow (p)print in examples
