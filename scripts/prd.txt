# Jira to OpenProject Migration Tool - Product Requirements Document (PRD)

# Overview
The Jira to OpenProject Migration Tool is designed to facilitate a comprehensive, one-time migration of project management data from Jira Server 9.11 to OpenProject 15. It follows a modular, configurable approach to handling various project entities while addressing known API limitations in both systems.

## Problem Statement
Organizations transitioning from Jira Server to OpenProject require a reliable, comprehensive tool to migrate their project management data without information loss. Manual migration is time-consuming, error-prone, and impractical for large project repositories.

## Solution
A robust Python-based migration tool that extracts data from Jira, transforms it according to configurable mapping strategies, and loads it into OpenProject using a combination of API calls and direct Rails console integration where necessary.

## Value Proposition
- Preserves project history, relationships, and metadata during migration
- Handles API limitations through advanced integration techniques
- Provides configurable mapping strategies to align with organizational needs
- Offers modular approach to migrate specific components independently
- Includes comprehensive logging and verification mechanisms
- Supports idempotent operation for incremental synchronization

# Core Features
## Migration Components
1. **User Migration**
   - Extract Jira users
   - Map users based on email/username
   - Create/update users in OpenProject

2. **Custom Field Migration**
   - Extract Jira custom fields
   - Map field types to OpenProject equivalents
   - Create custom fields via Rails console

3. **Project Migration**
   - Extract Jira projects
   - Map project attributes and hierarchy
   - Create/update projects in OpenProject

4. **Issue Type Migration**
   - Extract Jira issue types
   - Map to OpenProject work package types
   - Create work package types via Rails console

5. **Status Migration**
   - Extract Jira statuses
   - Map to OpenProject statuses
   - Configure OpenProject statuses

6. **Workflow Migration**
   - Extract Jira workflows
   - Map to OpenProject workflows
   - Configure OpenProject workflows

7. **Work Package Migration**
   - Extract Jira issues (including sub-tasks, epics)
   - Map fields, statuses, types, and relationships
   - Create work packages in OpenProject
   - Migrate attachments and comments
   - Preserve all meta information (watchers, authors, assignees, creation dates, modification dates)

8. **Link Type Migration**
   - Extract Jira issue link types
   - Map to OpenProject relation types
   - Handle unmapped link types

9. **Tempo Data Migration**
   - Extract Tempo accounts and company data
   - Map to OpenProject custom fields and projects
   - Create appropriate structures in OpenProject

## Configuration Capabilities
1. **Connection Settings**
   - Jira and OpenProject server URLs
   - Authentication credentials
   - SSL verification settings

2. **Migration Parameters**
   - Component selection
   - Batch sizes
   - Rate limits
   - Force flags for re-extraction

3. **Mapping Strategies**
   - User mapping configuration
   - Status mapping configuration
   - Issue type mapping configuration
   - Link type mapping configuration
   - Custom field mapping configuration

## Operational Modes
1. **Full Migration**: Migrate all components in proper sequence
2. **Component Migration**: Migrate specific components independently
3. **Dry Run**: Simulate migration without making changes
4. **Force Re-extraction**: Re-extract data when needed
5. **Direct Rails Console Integration**: Execute commands directly on OpenProject
6. **Ruby Script Generation**: Generate scripts for manual execution
7. **Incremental Synchronization**: Idempotent operation allowing multiple runs to update only changed data

# User Experience
## Primary Users
- System Administrators performing Jira to OpenProject migration
- IT Project Managers overseeing migration projects
- DevOps Engineers setting up and executing migration processes

## Use Cases
1. **Complete Migration**: Full migration of all project management data from Jira to OpenProject
2. **Selective Migration**: Migration of specific components (e.g., only users and projects)
3. **Testing Migration**: Evaluation of migration outcome in staging environment
4. **Dry-Run Validation**: Verification of migration configuration without making changes
5. **Incremental Migration**: Executing migration in phases for specific project subsets
6. **Ongoing Synchronization**: Running the tool multiple times over a longer period to keep OpenProject updated with Jira changes

## User Journey
1. Configuration: User sets up connection parameters and mapping strategies
2. Validation: User performs dry run to validate configuration
3. Execution: User initiates migration process
4. Monitoring: User monitors progress through detailed logging
5. Verification: User validates migration results against success criteria
6. Incremental Updates: User periodically runs the tool to synchronize changes from Jira to OpenProject

# Technical Architecture
## System Architecture
The solution employs a layered architecture for interacting with OpenProject:

```
┌─────────────────────────┐
│    OpenProjectClient    │  High-level API for OpenProject operations
└───────────┬─────────────┘
            │
┌───────────▼─────────────┐
│   RailsConsoleClient    │  Handles Rails console interactions
└───────────┬─────────────┘
            │
┌───────────▼─────────────┐
│      DockerClient       │  Manages Docker container operations
└───────────┬─────────────┘
            │
┌───────────▼─────────────┐
│        SSHClient        │  Handles SSH operations to remote servers
└───────────┬─────────────┘
            │
┌───────────▼─────────────┐
│      FileManager        │  Manages file operations and tracking
└─────────────────────────┘
```

Each component migration follows an Extract-Transform-Load (ETL) pattern:
1. **Extract**: Data is retrieved from Jira and stored locally
2. **Transform**: Data is mapped according to defined strategies
3. **Load**: Transformed data is created in OpenProject

## Implementation Approach
- **Jira Extraction**: Utilizes Jira REST API v2, with optional custom ScriptRunner API endpoints for optimized data retrieval
- **OpenProject Import**: Primarily uses Rails console for comprehensive data import, bypassing API limitations
- **Idempotent Operation**: Implements change detection and state tracking to support multiple runs
- **Data Preservation**: Safeguards existing OpenProject data, including manually imported content
- **Script Generation**: Produces Ruby scripts that can be manually executed when direct Rails console access is unavailable

## Technology Stack
- Programming Language: Python 3.13
- Runtime Environment: Docker (recommended) or direct Python execution
- Key Libraries: `requests`, `httpx`, `rich`, `python-dotenv`, `pyyaml`
- Integration Methods: REST APIs, SSH, Docker, Rails Console

## Integration Points
### Jira Integration
- Jira Server REST API v2
- (Optional) ScriptRunner Add-On for efficient custom field option extraction

### OpenProject Integration
- OpenProject API v3
- Rails console access via SSH or Docker
- Ruby script execution for operations not supported by API

### File System Integration
- Local storage for extracted data
- JSON mapping files
- Ruby script generation

### Docker Integration
- Container management for Rails console access
- File transfer between local and container environments

## System Requirements
- Access credentials for Jira Server 9.11 and OpenProject 15
- API access to both systems
- (Optional) SSH access to OpenProject server for direct Rails console integration
- Docker and Docker Compose (recommended for operation)
- Python 3.13+ with virtual environment capability

# Development Roadmap
## Phase 1: Foundation & Core Components
- Project setup
- Configuration system
- Basic API clients
- Core migration framework
- Initial proof-of-concept migrations

## Phase 2: Component Implementation
- Implement each migration component
- Handle API limitations
- Develop Rails console integration
- Address complex data relationships

## Phase 3: Refinement & Testing
- Improve error handling and logging
- Optimize performance
- Enhance documentation
- Comprehensive testing

## Phase 4: Production Migration
- Final preparations
- Execution
- Verification
- Documentation

# Logical Dependency Chain
## Migration Sequence
1. **Users** - Foundation for all other entities
2. **Custom Fields** - Required before work packages can be created
3. **Companies/Customers** - Top-level project structure
4. **Projects** - Container for work packages
5. **Issue Types** - Required for work package creation
6. **Statuses** - Required for workflow configuration
7. **Workflows** - Required for proper status transitions
8. **Link Types** - Required for work package relationships
9. **Work Packages** - Core content migration
10. **Tempo Data** - Additional metadata

## Component Dependencies
- User migration must complete before any other migration
- Projects must exist before work packages can be created
- Custom fields must be defined before their values can be set
- Work package types must exist before work packages can be created
- Statuses must be configured before workflows can be defined

# Risks and Mitigations
## API Limitations
### OpenProject:
- **Risk**: Custom fields and work package types require Rails console
- **Mitigation**: Implement robust Rails console integration

- **Risk**: Some fields (author/creation date) cannot be set via API
- **Mitigation**: Use Rails console for these specific fields

- **Risk**: Link types cannot be modified via API
- **Mitigation**: Create custom fields for unmapped link types

### Jira:
- **Risk**: Custom field options retrieval can be slow for large instances
- **Mitigation**: Implement efficient batching and caching

- **Risk**: Pagination limits for large datasets
- **Mitigation**: Implement proper pagination handling with error recovery

- **Risk**: API inconsistencies requiring workarounds
- **Mitigation**: Build abstraction layer to normalize responses

## Performance Considerations
- **Risk**: Large datasets processing can be time-consuming
- **Mitigation**: Implement efficient batching, parallel processing where appropriate

- **Risk**: API rate limits could slow migration
- **Mitigation**: Configurable rate limiting and retry mechanisms

## Data Integrity Risks
- **Risk**: Partial migrations or failures
- **Mitigation**: Transaction-like operations, detailed logging, clear error states

- **Risk**: Loss of manually imported or modified data in OpenProject
- **Mitigation**: Implement data preservation checks before updates

## Operational Risks
- **Risk**: Unavailable Rails console access
- **Mitigation**: Generate executable Ruby scripts for manual execution

- **Risk**: Network interruptions during long-running operations
- **Mitigation**: Implement robust state tracking and resumable operations

# Appendix
## Performance Requirements
- Handle large datasets (thousands of issues, users, projects)
- Implement efficient batching for API calls
- Optimize data extraction and processing
- Provide progress indicators for long-running operations

## Reliability Requirements
- Implement error handling and logging
- Provide retry mechanisms for failed operations
- Ensure data integrity during transfer
- Design operations to be idempotent where possible
- Preserve existing data in OpenProject
- Support for multiple runs with incremental updates

## Security Requirements
- Store credentials securely
- Support HTTPS connections
- Provide SSH key-based authentication for Rails console access
- Limit permissions to required operations

## Deployment Guide
### Environment Setup
1. Python 3.13+ virtual environment
2. Docker and Docker Compose (recommended)
3. Access credentials for both systems
4. Configuration files (.env, config.yaml)

### Installation Process
1. Clone repository
2. Set up Python environment
3. Configure environment variables
4. Build and start Docker container (if used)

### Operation Process
1. Run tool with appropriate parameters
2. Monitor progress and logs
3. Verify migration results
4. Execute any required manual steps
5. For incremental updates, periodically re-run with appropriate parameters

## Testing Strategy
### Test Categories
1. **Unit Tests**: Test individual components and functions
2. **Integration Tests**: Test interactions between components
3. **System Tests**: Test end-to-end migration flows
4. **Validation Tests**: Verify migration accuracy
5. **Idempotency Tests**: Verify multiple runs produce consistent results
6. **Data Preservation Tests**: Confirm existing data is not lost during updates

### Success Criteria
#### Quantitative Metrics
1. 100% of users successfully migrated
2. 100% of projects successfully migrated
3. >99% of work packages successfully migrated
4. >99% of custom fields successfully migrated
5. 100% of required workflows functional
6. >99% of issue links/relations correctly preserved
7. >99% of work logs/time entries accurately migrated
8. 100% of Tempo customers and accounts properly mapped
9. >99% of attachments successfully transferred with correct references
10. >99% of comments migrated with proper author attribution
11. 100% of meta information (watchers, authors, assignees, dates, creators) accurately preserved

#### Qualitative Assessments
1. Project hierarchies correctly represented
2. Work package relationships maintained
3. Custom field values accurately migrated
4. Workflow transitions functional
5. Attachment and comment integrity preserved
6. Jira markdown syntax successfully converted to OpenProject format
7. Issue descriptions with inline references properly translated
8. @mentions in comments and descriptions correctly mapped to OpenProject users
9. Tempo account structures and hierarchies properly represented
10. Inline attachments within text correctly rendered and accessible
11. Metadata and audit information correctly preserved (creation dates, authors, assignees)

#### Syntax Conversion Quality
1. **Jira to OpenProject Markdown**: Proper conversion of Jira's wiki markup to OpenProject's markdown format
2. **Inline Links**: Correct transformation of Jira issue references to OpenProject work package references
3. **User Mentions**: Accurate conversion of Jira @username mentions to OpenProject @user mentions
4. **Code Blocks**: Preservation of code block formatting and syntax highlighting
5. **Tables**: Proper rendering of complex table structures
6. **Macro Handling**: Appropriate handling or fallback for Jira-specific macros
7. **Rich Content**: Preservation of images, diagrams, and other rich content within descriptions and comments

#### Idempotency Verification
1. Multiple runs of the tool produce consistent results
2. Only changed data is updated during subsequent runs
3. Manually added or modified data in OpenProject is preserved
4. Performance remains consistent across multiple executions

# Client Architecture Refactoring PRD

## Overview

This document outlines the requirements for refactoring the client architecture in the Jira to OpenProject migration tool to follow a clear layered design pattern. The goal is to establish proper ownership relationships between the different client components and ensure clean separation of responsibilities.

## Background

The current client architecture has evolved organically, leading to some inconsistencies in how components interact. There are cases where lower-level components (e.g., DockerClient) are owned by higher-level components that should not be responsible for their lifecycle. This refactoring aims to establish a clearer ownership model.

## Objectives

- Implement a layered client architecture with clear ownership relationships
- Ensure proper dependency injection between components
- Improve error handling and reliability
- Update documentation to reflect the new architecture
- Streamline file transfer and command execution workflows
- Enhance debugging capabilities

## Requirements

### Architecture Requirements

1. OpenProjectClient should:
   - Be the top-level API for OpenProject interactions
   - Directly own and instantiate SSHClient, DockerClient, and RailsConsoleClient
   - Coordinate file transfers and command execution
   - Handle result processing and error management

2. RailsConsoleClient should:
   - Accept an existing DockerClient instance during initialization
   - Interact with tmux for Rails console access
   - Handle command execution and output parsing
   - Use direct output capture with markers for reliable output extraction

3. DockerClient should:
   - Accept an existing SSHClient instance during initialization
   - Handle container operations using the provided SSHClient
   - Manage file transfers to/from the container

4. SSHClient should:
   - Be initialized first in the chain
   - Handle direct SSH connections to the remote host
   - Provide file transfer and command execution primitives

### File Handling and Command Execution

1. Improve the command execution workflow:
   - Use a direct output capture approach with unique markers
   - Parse output between markers instead of relying on files for all results
   - Implement proper error handling and reporting

2. Enhance file transfers:
   - Clearly define file transfer paths through the component hierarchy
   - Use SSHClient for transfers to the remote host
   - Use DockerClient (via SSHClient) for transfers to the container

### Documentation Updates

1. Update the client architecture documentation:
   - Create a detailed client architecture document
   - Include a visual diagram showing component relationships
   - Document data flow patterns between components

2. Update the main README:
   - Update architecture diagram to reflect the new design
   - Add references to the new architecture documentation

## Success Criteria

- All client components follow the defined ownership hierarchy
- File transfers and command execution work reliably
- Clear documentation describing the architecture is available
- Error handling is comprehensive and provides useful debugging information
- Tests pass and verify the integrity of the architecture

## Future Considerations

- Consider implementing a more robust connection pool for Rails console sessions
- Evaluate alternatives to tmux for console interaction if needed
- Explore options for more concurrent operations using the new architecture

### Response Handling Standardization

To improve reliability and maintainability, the OpenProject client response handling needs standardization:

**Current Issue**: The `OpenProjectClient` inconsistently handles response formats from the Rails console:
- Some responses are automatically parsed into Python data structures
- Others return as strings with Ruby syntax (using `=>` instead of `:`)
- Some queries, particularly those returning large datasets, fail with interactive console formatting issues
- This requires duplicate parsing logic in multiple methods, increasing error potential

**Requirements**:
1. Create a centralized response parser that normalizes all Rails console outputs
2. Modify `execute_query()` to consistently return properly formatted Python objects
3. Update all dependent methods to expect standardized response formats
4. For large data queries (like retrieving all users), use the file-based approach with direct Rails runner commands
5. Add proper caching mechanisms to minimize repeated calls for the same data
6. Add better error handling for nil responses and empty results

**Implementation details**:
- Add specific methods for large data operations (users, projects, etc.) that use file-based approaches
- Update existing methods to normalize responses and handle Ruby-specific syntax
- Add logging for response format details to make debugging easier
- Implement consistent caching with configurable TTL for each data type

# Client Architecture YOLO Refactoring

## Overview

This high-priority task outlines the requirements for refactoring the client architecture in the Jira to OpenProject migration tool following the YOLO (You Only Live Once) and Exception-based development approach. The goal is to establish proper ownership relationships and clean separation of responsibilities between client components while aggressively removing legacy code patterns.

## Priority and Approach

This refactoring is a **high priority** task that must be completed before proceeding with the Link Type Migration work. The implementation will follow the YOLO development principles, which include:

- Immediate removal of legacy patterns and compatibility layers
- Aggressive simplification of component interfaces
- No backwards compatibility considerations
- Clean exception-based error handling
- Direct dependency relationships without adapters

## Requirements

### Component Refactoring Requirements

1. **SSHClient (Foundation Level)**
   - Streamline implementation to focus solely on SSH operations
   - Remove any OpenProject-specific code from this layer
   - Implement robust exception handling instead of returning status dictionaries
   - Use direct file-based imports to eliminate circular dependencies

2. **DockerClient (Container Level)**
   - Accept SSHClient instance directly through constructor injection
   - Remove all OpenProject-specific logic
   - Implement proper exception handling that passes errors up the stack
   - Simplify file transfer logic with clear error messages

3. **RailsConsoleClient (Console Level)**
   - Accept DockerClient instance directly through constructor injection
   - Implement clean error handling with descriptive exception types
   - Standardize command execution with reliable output parsing
   - Ensure robust error detection and reporting

4. **OpenProjectClient (Application Level)**
   - Own and coordinate all other client components
   - Initialize components in the correct hierarchical order
   - Implement consistent response parsing
   - Provide a clean high-level API

### Implementation Requirements

1. **Exception Handling**
   - Replace status dictionaries with proper exception classes
   - Implement appropriate exception hierarchies
   - Use try/except blocks with specific exception types
   - Propagate exceptions up the stack with contextual information

2. **Dependency Injection**
   - Components should accept dependencies via constructor parameters
   - Ensure clear ownership of component lifecycles
   - No implicit dependency creation within methods

3. **File-Based Imports**
   - Use direct imports from files to prevent circular dependencies
   - Organize imports to reflect component hierarchy

## Implementation Plan

1. Start with the User component as a blueprint for the refactoring
2. Refactor components from the bottom up:
   - SSHClient first
   - DockerClient second
   - RailsConsoleClient third
   - OpenProjectClient last
3. Test each component thoroughly after refactoring
4. Document the new architecture and component relationships

## Success Criteria

- All components follow the defined hierarchy
- Clean exception-based error handling
- No circular dependencies
- Tests pass and verify the integrity of the architecture
- Clear documentation reflecting the new design

## Deliverables

1. Refactored client components with clean interfaces
2. Updated documentation showing component relationships
3. Comprehensive test coverage for the refactored components
