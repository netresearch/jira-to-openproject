# Task ID: 21
# Title: Refactor SSHClient for Single Responsibility and Base Functionality
# Status: done
# Dependencies: None
# Priority: high
# Description: Refactor SSHClient to serve as the centralized base component for all SSH operations—including connection management, command execution, and file transfers—while removing direct SSH logic from any other clients.
# Details:
1. Create/Update SSHClient class:
   • Define core methods: connect(host, port, credentials), executeCommand(command, options), uploadFile(localPath, remotePath), downloadFile(remotePath, localPath), and close().
   • Implement connection pooling and automatic reconnect logic in connect/close to support long-running operations.
   • Add configurable timeouts, logging hooks, and retry policies for commands and transfers.
   • Ensure thread safety if used concurrently.
2. Refactor Dependent Clients:
   • Identify all existing clients that perform SSH operations directly (e.g., RemoteWorkerClient, DeploymentClient).
   • Remove any direct SSH logic from those classes and update them to depend on SSHClient via constructor or factory injection.
   • Expose only high-level methods (e.g., runDeployment(), syncArtifacts()) in dependent clients, delegating SSH calls to SSHClient.
3. Backward Compatibility & Deprecation:
   • Mark any legacy SSH utilities or methods for deprecation and schedule removal in a future release.
   • Provide migration guide/comments in code to assist future maintainers.
4. Documentation & Examples:
   • Update README or internal docs with usage examples for SSHClient and refactored client patterns.
   • Include code snippets for connection setup, command execution, and file transfer.
5. Code Quality & Standards:
   • Adhere to existing project style guides and linting rules.
   • Write comprehensive Javadoc or docstrings on all public methods of SSHClient.


# Test Strategy:
1. Unit Tests:
   • Mock SSH server library (e.g., using Paramiko’s `Transport` mocks) to simulate successful/failed connections.
   • Test connect/disconnect workflows, including timeouts and retry behavior.
   • Validate executeCommand returns correct stdout, stderr, and handles non-zero exit codes with exceptions.
   • Verify uploadFile/downloadFile correctly streams data and handles partial transfers or network errors.
   • Ensure thread-safety by running concurrent operations on the same SSHClient instance.
2. Integration Tests:
   • Spin up a local SSH server container (e.g., via Docker) in CI, run end-to-end tests for connecting, running commands, and transferring files.
   • Test edge cases: authentication failures, network interruptions, large file transfers.
3. Static Analysis:
   • Run a grep or AST-based scan to confirm no `ssh`, `exec_command`, or SFTP calls remain outside the SSHClient class.
   • Enforce code coverage thresholds (e.g., 90%+) on SSHClient module.
4. Code Review & Documentation Validation:
   • Peer review to confirm separation of concerns and proper dependency injection.
   • Verify updated documentation matches the implemented API.

